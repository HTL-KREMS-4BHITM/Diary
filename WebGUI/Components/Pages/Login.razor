@page "/Login"
@using System.Security.Claims
@using Domain.Repositories.Interfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Model
@using Model.Entities
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject IUserRepositoryAsync UserRepository 
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<style>
    .form-height {
        height: 100%;
        object-fit: cover;
    }

    .equal-height {
        display: flex;
        align-items: stretch;
        height: 100%;
    }

</style>
<div>
    @foreach (var u in accountPassw)
    {
        <h1>@u.Username</h1>
        <h1>@u.Password</h1>
    }
</div>
<div class="section-login py-5">
    <div class="container">
        <h3 class="text-center mb-4">Login</h3>
        <div class="row justify-content-center align-items-stretch equal-height">
            
            <div class="login_container col-lg-4 ms-0 me-0 ps-0 pe-0 h-100 d-flex align-items-center">
                <EditForm Model="_user" OnValidSubmit="LogIn" FormName="LoginForm" class="p-4 border rounded shadow w-100">
                    <div class="mb-4 mt-5 pt-4 border-bottom border-secondary">
                        <InputText @bind-Value="_user.Username" class="form-control" placeholder="Benutzername" />
                        <ValidationMessage For="() => _user.Username" />
                    </div>
                    <div class="mb-5 mt-3 border-bottom border-secondary">
                        <InputText @bind-Value="_user.Password" type="password" class="form-control" placeholder="Passwort" />
                        <ValidationMessage For="() => _user.Password" />
                    </div>
                    <div class="mb-3">
                        @if (_errorMessage != null)
                        {
                            <span class="text-danger">@_errorMessage</span>
                        }
                    </div>
                    <div class="mb-3 d-flex justify-content-center">
                        <span><a href="/signup">Konto erstellen</a></span>
                    </div>
                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary w-50 btn text-light w-100 mb-5 mt-3 pb-2">Login</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    private User _user = new();
    private string _errorMessage;
    private List<User> accountUsername = new();
    private List<User> accountPassw = new();
    private List<User> _users = new();
    private User _sessionuser = new();

    private async Task SetUser(int userid)
    {
        await ProtectedSessionStorage.SetAsync("UserId", userid);
    }
    /*protected override async Task OnInitializedAsync()
    {
       var result = await ProtectedSessionStorage.GetAsync<SessionData>("Username");
       if (result.Success)
           input = result.Value.Username;
    }*/
    
    protected override async Task OnInitializedAsync()
    {
        _users = await UserRepository.ReadAllAsync();
    }

    public async Task LogIn()
    {
        _errorMessage = await UserRepository.CheckUser(_user.Username, _user.Password, _users);
        if (String.IsNullOrEmpty(_errorMessage))
        {
            _sessionuser = _users.Where(u => u.Username == _user.Username && u.Password == _user.Password).ToList()[0];
            SetUser(_sessionuser.UserId);
            NavigationManager.NavigateTo("/");
        }
    }
}
