@code {
    private const int Rows = 6;
    private const int Cols = 7; // Standard Connect Four has 7 columns
    private int[,] board = new int[Rows, Cols];
    private int currentPlayer = 1;
    private string message = "Player 1's turn";
    private bool gameEnd = false;

    private void DropPiece(int col)
    {
        if (!gameEnd)
        {
            for (int row = Rows - 1; row >= 0; row--)
            {
                if (board[row, col] == 0)
                {
                    board[row, col] = currentPlayer;
                    if (CheckWin(row, col))
                    {
                        message = $"Player {currentPlayer} wins!";
                        StopGame();
                    }
                    else
                    {
                        currentPlayer = (currentPlayer == 1) ? 2 : 1;
                        message = $"Player {currentPlayer}'s turn";
                    }
                    return;
                }
            }
        }
    }

    private bool CheckWin(int row, int col)
    {
        int player = board[row, col];
        return CheckDirection(row, col, 1, 0, player) ||
               CheckDirection(row, col, 0, 1, player) ||
               CheckDirection(row, col, 1, 1, player) ||
               CheckDirection(row, col, 1, -1, player);
    }

    private bool CheckDirection(int row, int col, int dRow, int dCol, int player)
    {
        int count = 1;
        count += CountPieces(row, col, dRow, dCol, player);
        count += CountPieces(row, col, -dRow, -dCol, player);
        return count >= 4;
    }

    private int CountPieces(int row, int col, int dRow, int dCol, int player)
    {
        int count = 0;
        int r = row + dRow;
        int c = col + dCol;
        while (r >= 0 && r < Rows && c >= 0 && c < Cols && board[r, c] == player)
        {
            count++;
            r += dRow;
            c += dCol;
        }
        return count;
    }

    private void ResetGame()
    {
        board = new int[Rows, Cols];
        currentPlayer = 1;
        message = "Player 1's turn";
        gameEnd = false;
    }

    private void StopGame()
    {
        gameEnd = true;
    }
}

<div class="game-container">
    <h3>@message</h3>
    <div class="board">
        @for (int row = 0; row < Rows; row++)
        {
            <div class="board-row">
                @for (int col = 0; col < Cols; col++)
                {
                    int currentCol = col; // Create a local copy of col
                    <div @onclick="() => DropPiece(currentCol)" class="cell @(board[row, currentCol] == 1 ? "player1" : board[row, currentCol] == 2 ? "player2" : "empty")">
                        <div class="piece"></div>
                    </div>
                }
            </div>
        }
    </div>
    <button @onclick="ResetGame" class="restart-button">Restart Game</button>
</div>

<style>
    .game-container {
        text-align: center;
        font-family: Arial, sans-serif;
    }

    h3 {
        margin-bottom: 20px;
        font-size: 24px;
        color: #333;
    }

    .board {
        display: inline-block;
        background-color: #0074cc;
        padding: 10px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .board-row {
        display: flex;
    }

    .cell {
        width: 60px;
        height: 60px;
        margin: 5px;
        background-color: #fff;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .cell:hover {
        transform: scale(1.1);
    }

    .piece {
        width: 50px;
        height: 50px;
        border-radius: 50%;
    }

    .player1 .piece {
        background-color: red;
    }

    .player2 .piece {
        background-color: yellow;
    }

    .empty .piece {
        background-color: transparent;
    }

    .restart-button {
        margin-top: 20px;
        padding: 10px 20px;
        font-size: 18px;
        color: #fff;
        background-color: #28a745;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .restart-button:hover {
        background-color: #218838;
    }
</style>
