@using Domain.Repositories.Implementations
@using Domain.Repositories.Interfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStorage
@inject IUserRepositoryAsync UserRepository; 
@using Model
<style>
    .normal{
        
    }
    .nav-item .nav-link{
        color:#665148 ;
    }
    .sidebar{
        background-color: #C1AF9E !important;
    }
    .magic{
        
    }
    .halloween{
        
    }
</style>
<div class="sidebar d-flex h-100">
    <nav class="nav flex-column">
        <NavLink href="/" class="nav-link logo" Match="NavLinkMatch.All">
            <span class="fs-3">Magical Diary</span>
        </NavLink>

        

        <NavLink href="/Login" class="nav-link">
            <span>Login</span>
        </NavLink>
        <NavLink href="/signup" class="nav-link">
            <span>Create Account</span>
        </NavLink>
        <NavLink href="/Logout" class="nav-link">
            <span>Logout</span>
        </NavLink>

        @switch (User.Modus)
        {
            case EModus.IsHalloween:
                <NavLink href="/H_DiaryEntryPage" class="nav-link">
                    <span>Diary</span>
                </NavLink>
                <NavLink href="/H_DiaryHomepage" class="nav-link">
                    <span>Your Entries</span>
                </NavLink>
                break;
            case EModus.IsMagic:
                <NavLink href="/M_DiaryEntryPage" class="nav-link">
                    <span>Diary</span>
                </NavLink>
                <NavLink href="/M_DiaryHomepage" class="nav-link">
                    <span>Your Entries</span>
                </NavLink>
                break;
            default:
                <NavLink href="/DiaryEntryPage" class="nav-link">
                    <span>Diary</span>
                </NavLink>
                <NavLink href="/DiaryHomepage" class="nav-link">
                    <span>Your Entries</span>
                </NavLink>
                break;
        }
        <div class="px-3 mt-auto mb-3">
            <label class="form-label fw-bold mt-3">Modus</label>
            <select class="form-select w-100" @onchange="OnModusChanged" value="@((int)User.Modus)">
                <option value="0">Magic</option>
                <option value="1">Standard</option>
                <option value="2">Halloween</option>
            </select>
        </div>

    </nav>
</div>

@code {
    public User User = new User();

    protected override async Task OnInitializedAsync()
    {
        var idResult = await ProtectedSessionStorage.GetAsync<int>("UserId");
        var modusResult = await ProtectedSessionStorage.GetAsync<int>("modus");

        if (idResult.Success)
            User = await UserRepository.ReadAsync(idResult.Value);

        if (modusResult.Success)
            User.Modus = (EModus)modusResult.Value;
    }

    private async Task OnModusChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var selectedModus))
        {
            User.Modus = (EModus)selectedModus;
            await ProtectedSessionStorage.SetAsync("modus", selectedModus);
            StateHasChanged();
        }
    }
}
